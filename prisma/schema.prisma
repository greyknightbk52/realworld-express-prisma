// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL") /// Format in env file: postgresql://USER:PASSWORD@HOST:PORT/DATABASE
}

model User {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  email      String    @unique /// User email for registering and login use.
  username   String    @unique /// User internal id.
  password   String /// User password stored in the database.
  bio        String? /// User biographical information.
  image      String? /// Link to the user avatar.
  followUserIds String[] @db.ObjectId
  follows    User[]    @relation("UserFollows", fields: [followUserIds], references: [id]) /// List of other users that this one follows.
  followedByUserIds String[] @db.ObjectId
  followedBy User[]    @relation("UserFollows", fields: [followedByUserIds], references: [id]) /// List of other users that follows this one.
  authored   Article[] @relation("Author") /// List of articles this user has written.
  favoriteArticleIds String[] @db.ObjectId
  favorites  Article[] @relation("Favorites", fields: [favoriteArticleIds], references: [id]) /// List of articles this user has favorited.
  comment    Comment[] @relation("Author") /// List of comments this user has written.
}

model Article {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  title          String    @unique
  slug           String    @unique /// Slug is an uri safe string derived from the title.
  description    String /// Description for SEO of this article.
  body           String /// The main content of the article.
  tagIds         String[] @db.ObjectId
  tagList        Tag[] @relation(fields: [tagIds], references: [id]) /// List of tags associated with this article.
  author         User      @relation("Author", fields: [authorUsername], references: [username], onDelete: Cascade) /// User that is the author of this article.
  authorUsername String /// Username of the author of this article.
  favoritedByUserIds String[] @db.ObjectId
  favoritedBy    User[]    @relation("Favorites", fields: [favoritedByUserIds], references: [id]) /// List of users that have favorited this article.
  comments       Comment[] @relation("Comments") /// List of comments of this article.
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now())
}

model Comment {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
  body           String /// The main content of the comment.
  author         User     @relation("Author", fields: [authorUsername], references: [username], onDelete: Cascade) /// User that is the author of this comment.
  authorUsername String /// Username of the author of this comment.
  Article        Article  @relation("Comments", fields: [articleSlug], references: [slug], onDelete: Cascade) /// Article that this comment belongs to.
  articleSlug    String /// Article slug that this comment belongs to.
}

model Tag {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  tagName String    @unique
  articleIds String[] @db.ObjectId
  article Article[] @relation(fields: [articleIds], references: [id]) /// List of articles that have this tag.
}
